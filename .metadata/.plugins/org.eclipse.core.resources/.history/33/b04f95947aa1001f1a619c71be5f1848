package com.cg.emp;


import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Scanner;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.cfg.Configuration;

import com.cg.emp.persistance.HibernateUtil;

 
public class UseEmployee {
    public static void main(String[] args) {
        SessionFactory factory = new Configuration().configure().buildSessionFactory();
        Session session = factory.openSession();
        UseEmployeeHql employeeHQL = new UseEmployeeHql();
        Scanner scanner = new Scanner(System.in);
 
        while (true) {
            System.out.println("\nMenu:");
            System.out.println("1. Insert Employee Record");
            System.out.println("2. Get All Employee Records");
            System.out.println("3. Get Employee by ID");
            System.out.println("4. Get Employee by First Name");
            System.out.println("5. Get Employee by Last Name");
            System.out.println("6. Get Employee by Full Name");
            System.out.println("7. Get Employee by ID and Salary");
            System.out.println("8. Get Employees Joined from Start Date to Today");
            System.out.println("9. Exit");
            System.out.print("Choose an option: ");
 
            int choice = scanner.nextInt();
            scanner.nextLine(); // Consume newline
 
            switch (choice) {
                case 1:
                    // Insert Employee Record
                    System.out.print("Enter First Name: ");
                    String firstName = scanner.nextLine();
                    System.out.print("Enter Last Name: ");
                    String lastName = scanner.nextLine();
                    System.out.print("Enter Salary: ");
                    int salary = scanner.nextInt();
                    System.out.println("Enter date of joining:");
                    String dojString = scanner.nextLine();
                    Date dateOfJoining = null;
                    try {
                        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
                        java.util.Date parsedDate = dateFormat.parse(dojString);  
                        dateOfJoining = new Date(parsedDate.getTime());  
                    } catch (ParseException e) {
                        System.out.println("Invalid date format! Please use 'yyyy-mm-dd'.");
                        e.printStackTrace();
                        return;  
                    }
 
                    Employee newEmployee = new Employee(firstName, lastName, salary, dateOfJoining);
                    employeeHQL.insertRecord(session, newEmployee);
                    break;
 
                case 2:
                    // Get All Employee Records
                    List<Employee> allEmployees = employeeHQL.getAllRecords(session);
                    System.out.println("All Employees:");
                    allEmployees.forEach(System.out::println);
                    break;
 
                case 3:
                    // Get Employee by ID
                    System.out.print("Enter Employee ID: ");
                    int id = scanner.nextInt();
                    Employee employeeById = employeeHQL.getRecordById(session, id);
                    System.out.println("Employee with ID " + id + ": " + employeeById);
                    break;
 
                case 4:
                    // Get Employee by First Name
                    System.out.print("Enter First Name: ");
                    String fName = scanner.nextLine();
                    List<Employee> employeesByFirstName = employeeHQL.getRecordsByFirstName(session, fName);
                    System.out.println("Employees with First Name " + fName + ":");
                    employeesByFirstName.forEach(System.out::println);
                    break;
 
                case 5:
                    // Get Employee by Last Name
                    System.out.print("Enter Last Name: ");
                    String lName = scanner.nextLine();
                    List<Employee> employeesByLastName = employeeHQL.getRecordsByLastName(session, lName);
                    System.out.println("Employees with Last Name " + lName + ":");
                    employeesByLastName.forEach(System.out::println);
                    break;
 
                case 6:
                    // Get Employee by Full Name
                    System.out.print("Enter First Name: ");
                    String fullNameFirstName = scanner.nextLine();
                    System.out.print("Enter Last Name: ");
                    String fullNameLastName = scanner.nextLine();
                    List<Employee> employeesByFullName = employeeHQL.getEmployeesByFullName(session, fullNameFirstName, fullNameLastName);
                    System.out.println("Employees with Full Name " + fullNameFirstName + " " + fullNameLastName + ":");
                    employeesByFullName.forEach(System.out::println);
                    break;
 
                case 7:
                    // Get Employee by ID and Salary
                    System.out.print("Enter Employee ID: ");
                    int empId = scanner.nextInt();
                    System.out.print("Enter Salary: ");
                    int empSalary = scanner.nextInt();
                    List<Employee> employeesByIdAndSalary = employeeHQL.getEmployeesByIdAndSalary(session, empId, empSalary);
                    System.out.println("Employees with ID " + empId + " and Salary " + empSalary + ":");
                    employeesByIdAndSalary.forEach(System.out::println);
                    break;
 
                case 8:
                    System.out.println("Enter Start Date (yyyy-MM-dd): ");
                    String startDateStr = scanner.nextLine();
                    System.out.println("Enter End Date (yyyy-MM-dd): ");
                    String endDateStr = scanner.nextLine();
                    employeeHQL.getEmployeeStartDatetoToday(startDateStr, endDateStr);
                    break;

 
                case 9:
                    // Exit
                    System.out.println("Exiting...");
                    session.close();
                    factory.close();
                    scanner.close();
                    return;
 
                default:
                    System.out.println("Invalid choice! Please try again.");
            }
        }
    }
}